// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeScript, EventEmitter, Interface, Package, PackageManager, Xiki, XikiExtensions, XikiServer, debug, getuser, issubclass, path, user_xikis,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require("debug")('xiki');

  user_xikis = {};

  path = require("path");

  CoffeeScript = require("coffee-script");

  EventEmitter = require('events').EventEmitter;

  XikiExtensions = require('./extensions');

  issubclass = function(B, A) {
    return B.prototype instanceof A;
  };

  getuser = function(req) {};

  XikiServer = (function(_super) {
    __extends(XikiServer, _super);

    function XikiServer(opts) {
      var _ref, _ref1;
      this.credentials = opts.credentials;
      this.port = (_ref = opts.port) != null ? _ref : 18181;
      this.host = (_ref1 = opts.host) != null ? _ref1 : "localhost";
      global.xiki = this;
      this.Context = XikiContext;
    }

    XikiServer.prototype.serve = function() {
      var app, bodyParser, logger, server;
      this.app = app = require("express")();
      logger = require('morgan');
      bodyParser = require('body-parser');
      app.use(logger("dev"));
      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded());
      app.use(bodyParser.text());
      app.use(/^\/*/, (function(_this) {
        return function(req, res) {
          var action, err;
          req.xikiPath = req.params[0];
          action = "open";
          if ("open" in req.query) {
            action = "open";
          }
          if ("close" in req.query) {
            action = "close";
          }
          req.xikiAction = action;
          try {
            return parseXikiRequest({
              req: req,
              res: res
            }).process(_this, function(err, result) {
              return res.write(_this.xikify(result));
            });
          } catch (_error) {
            err = _error;
            return console.log(err);
          }
        };
      })(this));
      app.use(function(req, res, next) {
        var err;
        err = new Error("Not Found");
        err.status = 404;
        return next(err);
      });
      if (app.get('env') === 'development') {
        app.use(function(err, req, res, next) {
          res.status(err.status || 500);
          return res.render("error", {
            message: err.message,
            error: err
          });
        });
      }
      app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        return res.render("error", {
          message: err.message,
          error: {}
        });
      });
      this.extensions = new XikiExtensions(this);
      return server = app.listen(this.port, this.host, (function(_this) {
        return function() {
          return debug("listening to " + _this.host + ":" + _this.port);
        };
      })(this));
    };

    XikiServer.prototype.request = function(path, body, callback) {
      var err, req;
      try {
        req = new XikiRequest(path);
        return callback(null, req);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    };

    XikiServer.prototype.use = function(thing) {
      if (issubclass(thing, XikiContext)) {
        return this.contexts.push(thing);
      }
    };

    XikiServer.prototype.contexts = function() {};

    XikiServer.prototype.getdb = function(name) {
      if (!this.mongodb) {
        this.mongodb = require('mongodb');
      }
      return this.mongodb["return"];
    };

    return XikiServer;

  })(EventEmitter);

  Package = (function(_super) {
    __extends(Package, _super);

    function Package(dir, name) {
      this.dir = dir;
      this.name = name;
      if (!this.name) {
        this.name = path.basename(this.dir);
      }
      this.dir += "/xiki";
      this.loading = [];
      this.on("load", (function(_this) {
        return function(name) {
          if (_this.loadTimeout) {
            clearTimeout(_this.loadTimeout);
            _this.loadTimeout = null;
          }
          return _this.loading.push(name);
        };
      })(this));
      this.on("loaded", (function(_this) {
        return function(name) {
          return _this.loaded(name);
        };
      })(this));
      this.loadTimeout = setTimeout(((function(_this) {
        return function() {
          return _this.loaded;
        };
      })(this)), 100);
    }

    Package.prototype.loaded = function(name, doneEvent) {
      var index;
      if (!doneEvent) {
        doneEvent = "package-loaded";
      }
      if (name) {
        index = this.loading.indexOf(name);
        if (index > -1) {
          this.loading = this.loading.splice(index, 1);
        }
      }
      if (!this.loading.length) {
        return this.emit(doneEvent);
      }
    };

    return Package;

  })(EventEmitter);

  PackageManager = (function(_super) {
    __extends(PackageManager, _super);

    function PackageManager(xiki) {
      this.xiki = xiki;
      this._packages = [];
      this.loading = [];
    }

    PackageManager.prototype.add = function(dir, name) {
      var pkg;
      pkg = new Package(dir, name);
      this.loading.push(pkg.name);
      pkg.on("package-loaded", (function(_this) {
        return function() {
          pkg.loaded.apply(_this, [pkg.name, "loaded"]);
          return _this.emit("package-loaded", pkg);
        };
      })(this));
      this._packages.push(pkg);
      return this.emit("load-package", pkg);
    };

    return PackageManager;

  })(EventEmitter);

  Xiki = (function() {
    function Xiki(opts) {
      var extensionLoader, p, packagesPath, _i, _len;
      this._contexts = [];
      this.packages = new PackageManager(this);
      extensionLoader = new XikiExtensions(this);
      this.packages.add(path.normalize(path.join(__dirname, "..")));
      packagesPath = opts.packagesPath || [];
      if (typeof packagesPath === "string") {
        packagesPath = [packages(Path)];
      }
      for (_i = 0, _len = packagesPath.length; _i < _len; _i++) {
        p = packagesPath[_i];
        p = path.normalize(p);
        fs.readdir(p, (function(_this) {
          return function(entries) {
            var e, _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = entries.length; _j < _len1; _j++) {
              e = entries[_j];
              _results.push(_this.packages.add(path.join(p, e)));
            }
            return _results;
          };
        })(this));
      }
    }

    Xiki.prototype.request = function(_arg, response) {
      var action, args, body, parseXikiRequest, path, request;
      path = _arg.path, body = _arg.body, args = _arg.args, action = _arg.action;
      parseXikiRequest = require("./request-parser").parseXikiRequest;
      request = parseXikiRequest({
        path: path,
        body: body,
        args: args,
        action: action
      });
      return request.process(this, response);
    };

    Xiki.prototype.contexts = function() {
      return this._contexts;
    };

    Xiki.prototype.getSearchPath = function(type) {
      return this.packages.each(function(pkg) {
        return path.join(pkg.path, type);
      });
    };

    return Xiki;

  })();

  Interface = require('./interfaces');

  Interface.mixDefaultsInto(Xiki);

  Xiki.prototype.Interface = Interface;

  module.exports = {
    __express: function(req, res) {
      return path = req.params[0];
    },
    Xiki: Xiki
  };

}).call(this);
