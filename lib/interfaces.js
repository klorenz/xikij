// Generated by CoffeeScript 1.7.1
(function() {
  var FileSystem, Interface, Namespace, ProgramExecution, os, path, uuid,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Interface = require("./interface");

  Interface.define(ProgramExecution = (function() {
    function ProgramExecution() {}

    ProgramExecution.prototype.execute = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).execute.apply(_ref, args);
    };

    ProgramExecution.prototype.executeShell = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).execute.apply(_ref, args);
    };

    return ProgramExecution;

  })());

  Interface["default"](ProgramExecution = (function(_super) {
    __extends(ProgramExecution, _super);

    function ProgramExecution() {
      return ProgramExecution.__super__.constructor.apply(this, arguments);
    }

    ProgramExecution.prototype.execute = function() {
      var args, opts;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      opts = args.pop();
      if (typeof opts !== "object") {
        args.push(opts);
        opts = {};
      }
      if (!('cwd' in opts)) {
        return opts.cwd = this.getcwd();
      }
    };

    return ProgramExecution;

  })(Interface.ProgramExecution));

  Interface.define(Namespace = (function() {
    function Namespace() {}

    Namespace.prototype.getNamespace = function() {
      var _ref;
      return (_ref = this.NAMESPACE) != null ? _ref : this.constructor.name;
    };

    Namespace.prototype.getNamespaces = function() {
      return this.getSetting(".namespaces", this.getNamespace(), []);
    };

    return Namespace;

  })());

  Interface.define(FileSystem = (function() {
    function FileSystem() {}

    FileSystem.prototype.isdir = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).isdir.apply(_ref, args);
    };

    FileSystem.prototype.listdir = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).listdir.apply(_ref, args);
    };

    FileSystem.prototype.exists = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).exists.apply(_ref, args);
    };

    FileSystem.prototype.walk = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).walk.apply(_ref, args);
    };

    FileSystem.prototype.getmtime = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).getmtime.apply(_ref, args);
    };

    FileSystem.prototype.writeFile = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).writeFile.apply(_ref, args);
    };

    FileSystem.prototype.readFile = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).readFile.apply(_ref, args);
    };

    FileSystem.prototype.getcwd = function() {
      return this.context.getcwd();
    };

    FileSystem.prototype.makedirs = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).makedirs.apply(_ref, args);
    };

    FileSystem.prototype.tempfile = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.context).tempfile.apply(_ref, args);
    };

    return FileSystem;

  })());

  path = require('path');

  os = require('os');

  uuid = require('uuid');

  Interface["default"](FileSystem = (function(_super) {
    __extends(FileSystem, _super);

    function FileSystem() {
      return FileSystem.__super__.constructor.apply(this, arguments);
    }

    FileSystem.prototype.tempfile = function(name, content, options, callback) {
      if (!this.tmpdir) {
        this.tmpdir = path.join((os.tmpdir || os.tmpDir)(), uuid.v4());
        this.on('shutdown', (function(_this) {
          return function() {};
        })(this));
      }
      return this.writeFile(path.join(this.tmpdir, name), content, options, callback);
    };

    FileSystem.prototype.writeFile = function(filename, content, options, callback) {
      var dirname;
      dirname = path.dirname(filename);
      if (!this.exists(dirname)) {
        this.makedirs(dirname);
      }
      options = options || {};
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (callback) {
        return fs.writeFile(filename, data, options, callback);
      } else {
        return fs.writeFileSync(filename, data, options);
      }
    };

    FileSystem.prototype.readFile = function(filename, options, callback) {
      var buf, count, fd, totalRead;
      options = options || {};
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (callback) {
        if (options.count) {
          return fs.open(filename, "r", (function(_this) {
            return function(err, fd) {
              var buf, count, reader, totalRead;
              if (err) {
                return callback(err);
              }
              count = options.count;
              buf = new Buffer(count);
              totalRead = 0;
              reader = function(err, bytesRead, buffer) {
                if (err) {
                  fs.close(fd);
                  return callback(err, buffer);
                } else {
                  totalRead += bytesRead;
                  if (totalRead < count) {
                    return fs.read(fd, buf, totalRead, count - totalRead, totalRead, reader);
                  } else {
                    return fs.close(fd, function() {
                      return callback(err, buffer);
                    });
                  }
                }
              };
              return reader(null, 0, buf);
            };
          })(this));
        } else {
          return fs.readFile(filename, options, callback);
        }
      } else {
        if (options.count) {
          fd = fs.openSync(filename, "r");
          count = options.count;
          buf = new Buffer(count);
          totalRead = 0;
          while (totalRead < count) {
            totalRead += fs.readSync(fd, buf, totalRead, count - totalRead, totalRead);
          }
          fs.closeSync(fd);
          return buf;
        } else {
          return fs.readFileSync(filename, options);
        }
      }
    };

    FileSystem.prototype.isdir = function(filename, callback) {
      var stat;
      if (callback) {
        return fs.stat(filename, function(stat) {
          return callback(stat.isDirectory());
        });
      } else {
        stat = fs.statSync(filename);
        return stat.isDirectory();
      }
    };

    FileSystem.prototype.listdir = function(dir, callback) {
      var entries, handleEntries, obj;
      obj = this;
      handleEntries = function(entries) {
        var e, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = entries.length; _i < _len; _i++) {
          e = entries[_i];
          if (obj.isdir(path.join(dir, e))) {
            _results.push("" + e + "/");
          } else {
            _results.push(e);
          }
        }
        return _results;
      };
      if (callback) {
        fs.readdir(dir, function(entries) {
          return callback(handleEntries(entries));
        });
      }
      entries = fs.readdirSync;
      return handleEntries(entries);
    };

    FileSystem.prototype.exists = function(filename) {
      return fs.existsSync(filename);
    };

    FileSystem.prototype.walk = function(dir, func) {
      var e, filename, stat, _i, _len, _ref, _results;
      _ref = fs.readdirSync(dir);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e === ".git" || e === ".hg" || e === ".svn") {
          continue;
        }
        filename = path.join(dir, e);
        stat = fs.statSync(filename);
        func(dir, e, stat);
        if (stat.isDirectory()) {
          _results.push(this.walk(filename, func));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    FileSystem.prototype.getmtime = function(filename) {
      var stat;
      stat = fs.statSync(filename);
      return stat.mtime;
    };

    FileSystem.prototype.getcwd = function() {
      return path.resolve(".");
    };

    return FileSystem;

  })(FileSystem));

  module.exports = Interface;

}).call(this);
