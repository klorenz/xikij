// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, INDENT, XikiResult, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  INDENT = /^[ \t]*/;

  stream = require('stream');

  EventEmitter = require('events').EventEmitter;

  XikiResult = (function(_super) {
    __extends(XikiResult, _super);

    function XikiResult(stream, type, annotate) {
      var result;
      this.stream = stream;
      this.type = type;
      this.annotate = annotate != null ? annotate : null;
      result = "";
      this.stream.on("data", (function(_this) {
        return function(data) {
          _this.emit("data", data);
          return result += data;
        };
      })(this)).on("end", (function(_this) {
        return function() {
          _this.emit("end");
          if (_this.annotate) {
            _this.annotate(result);
          }
          return _this.emit("result", result);
        };
      })(this));
    }

    return XikiResult;

  })(EventEmitter);

  module.exports = {
    getIndent: function(line) {
      return INDENT.exec(line)[0];
    },
    cookCoffee: function(content, done) {
      var isCoffee, isJavaScript, isMenu, line, lines, menu, out, _i, _len;
      lines = content.toString().split(/\n/);
      isCoffee = false;
      isJavaScript = false;
      isMenu = false;
      out = [];
      menu = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.match(/^```coffee/)) {
          isCoffee = true;
          out.push("# ```coffee");
          continue;
        }
        if (isCoffee && line.match(/^\s*\# example/)) {
          menu.push(out[out.length - 1] = out[out.length - 1].slice(2));
          isCoffee = false;
        }
        if (isCoffee && line.match(/^```$/)) {
          isCoffee = false;
          out.push("# ```");
          continue;
        }
        if (isCoffee) {
          out.push(line);
        } else {
          menu.push(line);
          out.push("# " + line);
        }
      }
      return done(out.join("\n") + "\n", menu.join("\n") + "\n");
    },
    makeResult: function(x, annotate) {
      var ResultProvider, result;
      if (x instanceof stream.Readable) {
        return new XikiResult(x, "text/plain", annotate);
      }
      ResultProvider = (function(_super) {
        __extends(ResultProvider, _super);

        function ResultProvider() {
          return ResultProvider.__super__.constructor.apply(this, arguments);
        }

        ResultProvider.prototype._read = function() {
          if (x instanceof Buffer) {
            if (!this.done) {
              this.done = true;
              this.push(x);
            } else {
              this.push(null);
            }
          }
          if (x instanceof Array) {
            if (!this.element) {
              this.element = 0;
            }
            if (this.element < x.length) {
              while (this.push("+ " + x[this.element] + "\n")) {
                this.element += 1;
              }
            } else {
              this.push(null);
            }
          }
          if (!this.done) {
            this.done = true;
            return this.push(JSON.stringify(x));
          } else {
            return this.push(null);
          }
        };

        return ResultProvider;

      })(stream.Readable);
      result = new ResultProvider();
      if ((typeof x === "object") && !(x instanceof Array) && !(x instanceof Buffer)) {
        return new XikiResult(result, "application/json", annotate);
      }
      return new XikiResult(result, "text/plain", annotate);
    }
  };

}).call(this);
